print("testing")
print("####################### List #######################")
list = ["Automation", "Selenium", "Playwright", "789", 895, "LangGraph"]
insertList = ["Palanimohan", "Dhiwansundar"]
print(list)
print("########### Addition ###########")
list.append("LLM")
# List accepts different data types
list.append(8.56)
list.append(insertList)
list.append(["Test1", "Test2"])
print(list)
print(type(insertList))
list.insert(3,"FASTAPI")
list.insert(3,"FASTAPI")
list.insert(59,"FASTAPI")
list.insert(-3, insertList)
print(type(list[7]))
print(list)
list.extend(["Python", "Java", "JavaScript"])
list.extend("rte")
# If extend is used with a string, it will add each character as an element
list.extend([8.56])
print(list)
# Append accepts obj as a parameter whereas extend accepts iterable as a parameter
print("########### Deletion ###########")
print(list)
print(list.pop(5))
print("--------------------------")
print(list.pop())
print("--------------------------")
print(list.remove("FASTAPI"))
print(list)
print(list.remove(insertList))
print(list)
# list.clear()
print("--------------------------")
# Copy creates a new list with the same elements in a different memory location but assignment does not
test = list.copy()
print(test)
print(id(test))
print(id(list))
print(list.append("Testing"))
print(list)
print(test)
print(id(list))
print(id(test))
test1 = test
print(test)
print(test1)
print(id(test))
print(id(test1))
print(test.append("Checking"))
print(test)
print(test1)
print(id(test))
print(id(test1))
print(list.count("FASTAPI"))
print(list)
print(list.index("FASTAPI"))
print(list.index('FASTAPI', 4,17))
print(len(list))
print(list.remove(insertList))
print(list.remove(["Test1", "Test2"]))
list.remove(8.56)
list.remove(895)
print(list)
list.sort()
list.sort(reverse=True)
sorted(list)
list.reverse()
sorted(list)
reversed(list)
print(list)
print(min(list))
print(max(list))
del(list[0])
del(list)
print(list)
newList = [ 1,2,4.5,89,8.003]
print(sum(newList))
print(newList[2:4])
print(newList[-1:2:-1]) # why am I not getting [8.003,1 ,2] ?


####################### Tuple #######################

tup = ("Cadbury", "Nestle", "Mars", "Hershey's", 789, 895, "LangGraph")
# tup.